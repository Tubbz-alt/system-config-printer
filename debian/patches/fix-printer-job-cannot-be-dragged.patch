diff --git a/cupspk.py b/cupspk.py

index c9aab03..3b9bd08 100644
--- a/cupspk.py
+++ b/cupspk.py
@@ -330,6 +330,15 @@ class Connection:
                                         'JobSetHoldUntil', pk_args,
                                         self._connection.setJobHoldUntil,
                                         *args, **kwds)
+        
+    def setJobPriority(self, *args, **kwds):
+        (use_pycups, jobid, jobpriority) = self._args_to_tuple([int, int], *args)
+        pk_args = (jobid, jobpriority, )
+
+        self._call_with_pk_and_fallback(use_pycups,
+                                        'setJobPriority', pk_args,
+                                        self._connection.setJobPriority,
+                                        *args, **kwds)
 
     def restartJob(self, *args, **kwds):
         (use_pycups, jobid) = self._args_to_tuple([int], *args)
diff --git a/jobviewer.py b/jobviewer.py
index 86f5fea..d909a56 100644
--- a/jobviewer.py
+++ b/jobviewer.py
@@ -386,6 +386,7 @@ class JobViewer (GtkGUI):
                                    'job-state',
                                    'time-at-creation',
                                    'auth-info-required',
+                                   'job-priority',
                                    'job-preserved'])
 
     __gsignals__ = {
@@ -437,6 +438,10 @@ class JobViewer (GtkGUI):
         job_action_group.add_actions ([
                 ("cancel-job", Gtk.STOCK_CANCEL, _("_Cancel"), None,
                  _("Cancel selected jobs"), self.on_job_cancel_activate),
+                ("up-job", Gtk.STOCK_GO_UP, _("_Up"), None,
+                 _("Edit selected jobs"), self.on_job_up_activate),
+                ("down-job", Gtk.STOCK_GO_DOWN, _("_Down"), None,
+                 _("Edit selected jobs"), self.on_job_down_activate),
                 ("delete-job", Gtk.STOCK_DELETE, _("_Delete"), None,
                  _("Delete selected jobs"), self.on_job_delete_activate),
                 ("hold-job", Gtk.STOCK_MEDIA_PAUSE, _("_Hold"), None,
@@ -461,6 +466,8 @@ class JobViewer (GtkGUI):
 """
 <ui>
  <accelerator action="cancel-job"/>
+ <accelerator action="up-job"/>
+ <accelerator action="down-job"/>
  <accelerator action="delete-job"/>
  <accelerator action="hold-job"/>
  <accelerator action="release-job"/>
@@ -477,6 +484,8 @@ class JobViewer (GtkGUI):
         self.JobsWindow.add_accel_group (self.job_ui_manager.get_accel_group ())
         self.job_context_menu = Gtk.Menu ()
         for action_name in ["cancel-job",
+                            "up-job",
+                            "down-job",
                             "delete-job",
                             "hold-job",
                             "release-job",
@@ -502,6 +511,8 @@ class JobViewer (GtkGUI):
             self.job_context_menu.append (item)
 
         for action_name in ["cancel-job",
+                            "up-job",
+                            "down-job",
                             "delete-job",
                             "hold-job",
                             "release-job",
@@ -539,7 +550,7 @@ class JobViewer (GtkGUI):
         column = Gtk.TreeViewColumn (_("Time submitted"), cell, text=1)
         column.set_resizable (True)
         self.treeview.append_column (column)
-
+        
         column = Gtk.TreeViewColumn (_("Status"))
         icon = Gtk.CellRendererPixbuf ()
         column.pack_start (icon, False)
@@ -552,7 +563,8 @@ class JobViewer (GtkGUI):
         self.treeview.append_column (column)
 
         self.store = Gtk.TreeStore(int, str)
-        self.store.set_sort_column_id (0, Gtk.SortType.DESCENDING)
+        self.store.set_default_sort_func(self.job_poriority_compare)
+        self.store.set_sort_column_id (-1, Gtk.SortType.DESCENDING)
         self.treeview.set_model(self.store)
         self.treeview.set_rules_hint (True)
         self.selection = self.treeview.get_selection()
@@ -719,6 +731,28 @@ class JobViewer (GtkGUI):
 
         self.emit ('finished')
 
+    def job_poriority_compare(self, model, iter1, iter2, user_data=None):
+        jobid1 = model.get_value(iter1, 0)
+        jobid2 = model.get_value(iter2, 0)
+        try:
+            job1 = self.jobs[jobid1]
+            job2 = self.jobs[jobid2]
+        except KeyError:
+            return -1
+        
+        if ( job1["job-priority"] < job2["job-priority"] ):
+            return 1
+        elif ( job1["job-priority"] > job2["job-priority"] ):
+            return -1
+        else:
+            if jobid1 < jobid2:
+                return -1
+            elif jobid1 > jobid2:
+                return 1
+            else:
+                return 0
+
+
     def set_process_pending (self, whether):
         self.process_pending_events = whether
 
@@ -858,18 +892,22 @@ class JobViewer (GtkGUI):
 
     def add_job (self, job, data, connection=None):
         self.update_job (job, data, connection=connection)
-
+        
         # There may have been an error fetching additional attributes,
         # in which case we need to give up.
         if job not in self.jobs:
             return
-
         store = self.store
         iter = self.store.append (None)
         store.set_value (iter, 0, job)
+        value0 = self.treeview.get_model().get_value(iter, 0)
+        value1 = self.treeview.get_model().get_value(iter, 1)
+        #value2 = self.treeview.get_model().get_value(iter, 2)
+        #value3 = self.treeview.get_model().get_value(iter, 3)
+        #value4 = self.treeview.get_model().get_value(iter, 4)
         debugprint ("Job %d added" % job)
         self.jobiters[job] = iter
-
+               
         range = self.treeview.get_visible_range ()
         if range is not None:
             (start, end) = range
@@ -880,7 +918,7 @@ class JobViewer (GtkGUI):
                 # we are sorting by descending job ID.  Scroll to it.
                 self.treeview.scroll_to_cell (Gtk.TreePath(), None,
                                               False, 0.0, 0.0)
-
+        
         if not self.job_creation_times_timer:
             def start_updating_job_creation_times():
                 Gdk.threads_enter ()
@@ -889,7 +927,7 @@ class JobViewer (GtkGUI):
                 return False
 
             GLib.timeout_add (500, start_updating_job_creation_times)
-
+        
     def update_monitor (self):
         self.monitor.update ()
         if self.my_monitor:
@@ -922,7 +960,6 @@ class JobViewer (GtkGUI):
             except cups.IPPError:
                 # someone else may have purged the job
                 return
-
             if attrs:
                 data.update (attrs)
 
@@ -948,7 +985,6 @@ class JobViewer (GtkGUI):
                                          encryption=self.encryption)
                 attrs = c.getPrinterAttributes (uri = uri,
                                                 requested_attributes=pattrs)
-
                 try:
                     auth_info_required = attrs['auth-info-required']
                 except KeyError:
@@ -961,7 +997,7 @@ class JobViewer (GtkGUI):
                     attrs['auth-info-required'] = auth_info_required
 
                 data.update (attrs)
-
+                 
                 attrs = c.getJobAttributes (job,
                                             requested_attributes=jattrs)
                 data.update (attrs)
@@ -1266,6 +1302,8 @@ class JobViewer (GtkGUI):
             selection = self.treeview.get_selection () 
         (model, pathlist) = selection.get_selected_rows()
         cancel = self.job_ui_manager.get_action ("/cancel-job")
+        up = self.job_ui_manager.get_action ("/down-job")
+        down = self.job_ui_manager.get_action ("/up-job")
         delete = self.job_ui_manager.get_action ("/delete-job")
         hold = self.job_ui_manager.get_action ("/hold-job")
         release = self.job_ui_manager.get_action ("/release-job")
@@ -1275,12 +1313,14 @@ class JobViewer (GtkGUI):
         attributes = self.job_ui_manager.get_action ("/job-attributes")
         move = self.job_ui_manager.get_action ("/move-job")
         if len (pathlist) == 0:
-            for widget in [cancel, delete, hold, release, reprint, retrieve,
+            for widget in [cancel, up, down, delete, hold, release, reprint, retrieve,
                            move, authenticate, attributes]:
                 widget.set_sensitive (False)
             return
 
         cancel_sensitive = True
+        up_sensitive = True
+        down_sensitive = True
         hold_sensitive = True
         release_sensitive = True
         reprint_sensitive = True
@@ -1347,6 +1387,8 @@ class JobViewer (GtkGUI):
             move_sensitive = True
 
         cancel.set_sensitive(cancel_sensitive)
+        up.set_sensitive(up_sensitive)
+        down.set_sensitive(down_sensitive)
         delete.set_sensitive(not cancel_sensitive)
         hold.set_sensitive(hold_sensitive)
         release.set_sensitive(release_sensitive)
@@ -1393,6 +1435,162 @@ class JobViewer (GtkGUI):
     def on_job_cancel_activate(self, menuitem):
         self.on_job_cancel_activate2(False)
 
+    def _get_active_jobs_attrs(self, connection):
+        jobs_attrs = []
+        r = set(['job-id', 'job-priority'])
+        r = list(r)
+        jobids = list(connection.getJobs().keys())
+        for jobid in jobids:
+            attrs = connection.getJobAttributes(jobid, requested_attributes=r)
+            jobs_attrs.append(attrs)
+        return jobs_attrs
+
+    def _job_priority_compare(self, job1_attrs, job2_attrs):
+
+        if (job1_attrs["job-priority"] < job2_attrs["job-priority"]):
+            return 1
+        elif (job1_attrs["job-priority"] > job2_attrs["job-priority"]):
+            return -1
+        else:
+            if (job1_attrs["job-id"] < job2_attrs["job-id"]):
+                return -1
+            elif (job1_attrs["job-id"] > job2_attrs["job-id"]):
+                return 1
+            else:
+                return 0
+
+    def _jobs_attrs_sort_by_priority(self, jobs_attrs):
+        sorted_jobs_attrs = []
+        for attrs in jobs_attrs:
+            if sorted_jobs_attrs:
+                i = 0
+                for item in sorted_jobs_attrs:
+                    ret = self._job_priority_compare(item, attrs)
+                    if ret < 0:
+                        break
+                    else:
+                        i +=1
+                sorted_jobs_attrs.insert(i, attrs)
+            else:
+                sorted_jobs_attrs.append(attrs)
+        return sorted_jobs_attrs
+
+
+    def on_job_up_activate(self, menuitem):
+        try:
+            c = authconn.Connection (self.JobsWindow,
+                                     host=self.host,
+                                     port=self.port,
+                                     encryption=self.encryption)
+        except cups.IPPError as e:
+            (e, m) = e.args
+            self.show_IPP_Error (e, m)
+            self.update_monitor ()
+            return
+        except RuntimeError:
+            return
+        jobs_attrs = self._get_active_jobs_attrs(c)
+
+        sorted_jobs_attrs = self._jobs_attrs_sort_by_priority(jobs_attrs)
+
+        for jobid in self.jobids:
+            i = 0
+            for attrs in sorted_jobs_attrs:
+
+                if jobid == attrs['job-id']:
+                    current_attrs = attrs
+                    break
+                i += 1
+
+            if i >= len(sorted_jobs_attrs):
+                debugprint("Tis job is not found in active job list")
+            elif i == len(sorted_jobs_attrs) - 1:
+                debugprint("Tis job is already the highest priority job")
+            else:
+                current_attrs['job-priority'] = sorted_jobs_attrs[i+1]['job-priority']
+                if( self._job_priority_compare(current_attrs, sorted_jobs_attrs[i+1]) >= 0 ):
+                    current_attrs['job-priority'] += 1
+                if (( i + 2) < len(sorted_jobs_attrs)) and \
+                        (self._job_priority_compare(current_attrs, sorted_jobs_attrs[i + 2]) < 0):
+                    for j in range(i + 2, len(sorted_jobs_attrs)):
+                        sorted_jobs_attrs[j]['job-priority'] += 1
+                        if sorted_jobs_attrs[j]['job-priority'] > 100:
+                            debugprint("Can't continue to adjust job priority")
+                            return
+            for attrs in sorted_jobs_attrs:
+                if jobid == attrs['job-id']:
+                    c.setJobPriority(jobid, current_attrs['job-priority'])
+                else:
+                    c.setJobPriority(attrs['job-id'], attrs['job-priority'])
+
+        del c
+        self.monitor.refresh()
+        if self.my_monitor:
+            self.my_monitor.refresh()
+        self.update_job_creation_times()
+
+
+    def on_job_down_activate(self, menuitem):
+        try:
+            c = authconn.Connection(self.JobsWindow,
+                                    host=self.host,
+                                    port=self.port,
+                                    encryption=self.encryption)
+        except cups.IPPError as e:
+            (e, m) = e.args
+            self.show_IPP_Error(e, m)
+            self.update_monitor()
+            return
+        except RuntimeError:
+            return
+
+        jobs_attrs = self._get_active_jobs_attrs(c)
+        sorted_jobs_attrs = self._jobs_attrs_sort_by_priority(jobs_attrs)
+
+        for jobid in self.jobids:
+            i = 0
+            for attrs in sorted_jobs_attrs:
+
+                if jobid == attrs['job-id']:
+                    current_attrs = attrs
+                    break
+                i += 1
+
+            if i >= len(sorted_jobs_attrs):
+                debugprint("Tis job is not found in active job list")
+            elif i == 0:
+                debugprint("Tis job is already the lowest priority job")
+            else:
+                temp = current_attrs['job-priority']
+                current_attrs['job-priority'] = sorted_jobs_attrs[i - 1]['job-priority']
+                sorted_jobs_attrs[i - 1]['job-priority'] = temp
+                if ( i > 1 ) and (self._job_priority_compare(
+                        current_attrs, sorted_jobs_attrs[i - 2]) > 0):
+                    current_attrs['job-priority'] += 1
+
+                while (self._job_priority_compare(current_attrs, sorted_jobs_attrs[i - 1]) <= 0):
+                    sorted_jobs_attrs[i - 1]['job-priority'] += 1
+
+                if ((i + 1) < len(sorted_jobs_attrs)):
+                    while ( self._job_priority_compare(sorted_jobs_attrs[i - 1], sorted_jobs_attrs[i + 1]) <= 0 ):
+                        for j in range(i + 1, len(sorted_jobs_attrs)):
+                            sorted_jobs_attrs[j]['job-priority'] += 1
+                            if sorted_jobs_attrs[j]['job-priority'] > 100:
+                                debugprint("Can't continue to adjust job priority")
+                                return
+            for attrs in sorted_jobs_attrs:
+                if jobid == attrs['job-id']:
+                    c.setJobPriority(jobid, current_attrs['job-priority'])
+                else:
+                    c.setJobPriority(attrs['job-id'], attrs['job-priority'])
+
+        del c
+        self.monitor.refresh()
+        if self.my_monitor:
+            self.my_monitor.refresh()
+        self.update_job_creation_times()
+
+
     def on_job_delete_activate(self, menuitem):
         self.on_job_cancel_activate2(True)
 
@@ -1400,9 +1598,9 @@ class JobViewer (GtkGUI):
         if self.jobids:
             op = CancelJobsOperation (self.JobsWindow, self.host, self.port,
                                       self.encryption, self.jobids, purge_job)
-            self.ops.append (op)
-            op.connect ('finished', self.on_canceljobs_finished)
-            op.connect ('ipp-error', self.on_canceljobs_error)
+            #self.ops.append (op)
+            #op.connect ('finished', self.on_canceljobs_finished)
+            #op.connect ('ipp-error', self.on_canceljobs_error)
 
     def on_canceljobs_finished (self, canceljobsoperation):
         canceljobsoperation.destroy ()
@@ -1651,9 +1849,10 @@ class JobViewer (GtkGUI):
                 attr_treeview.insert_column_with_attributes(1, _("Value"),
                                                             cell, text=1)
                 attr_store = Gtk.ListStore(str, str)
+                attr_store.set_default_sort_func(self.job_poriority_compare)
+                attr_store.set_sort_column_id (-1, Gtk.SortType.ASCENDING)
                 attr_treeview.set_model(attr_store)
                 attr_treeview.get_selection().set_mode(Gtk.SelectionMode.NONE)
-                attr_store.set_sort_column_id (0, Gtk.SortType.ASCENDING)
                 self.jobs_attrs[jobid] = (attr_store, page_index)
                 self.update_job_attributes_viewer (jobid, conn=c)
 
@@ -1670,7 +1869,6 @@ class JobViewer (GtkGUI):
                                      encryption=self.encryption)
             except RuntimeError:
                 return False
-
         if jobid in self.jobs_attrs:
             (attr_store, page) = self.jobs_attrs[jobid]
             try:
@@ -2002,7 +2200,6 @@ class JobViewer (GtkGUI):
                 if attr not in self.jobs[jobid]:
                     self.jobs[jobid][attr] = value
                     debugprint ("Add %s=%s (my job)" % (attr, value))
-
         # If we failed to get required attributes for the job, bail.
         if jobid not in self.jobiters:
             return
@@ -2340,7 +2537,6 @@ class JobViewer (GtkGUI):
             job = self.jobs[jobid]
         except KeyError:
             return
-
         cell.set_property("text", job.get ('job-originating-user-name',
                                            _("Unknown")))
 
@@ -2353,6 +2549,7 @@ class JobViewer (GtkGUI):
 
         cell.set_property("text", job.get('job-name', _("Unknown")))
 
+
     def _set_job_printer_text (self, column, cell, model, iter, *data):
         jobid = model.get_value (iter, 0)
         try:

diff --git a/monitor.py b/monitor.py
index 620ceef..56efd01 100644
--- a/monitor.py
+++ b/monitor.py
@@ -640,7 +640,7 @@ class Monitor(GObject.GObject):
             cups.setUser (user)
             return False
 
-        limit = 1
+        limit = 15
         r = ["job-id",
              "job-printer-uri",
              "job-state",

diff --git a/po/zh_CN.po b/po/zh_CN.po
index f1fbe49..6d751fd 100644
--- a/po/zh_CN.po
+++ b/po/zh_CN.po
@@ -185,6 +185,14 @@ msgstr "正在取消任务"
 msgid "_Cancel"
 msgstr "取消(_C)"
 
+#: ../jobviewer.py:441
+msgid "_Up"
+msgstr "上移(_U)"
+
+#: ../jobviewer.py:443
+msgid "_Down"
+msgstr "下移(_D)"
+
 #: ../jobviewer.py:438
 msgid "Cancel selected jobs"
 msgstr "取消已选中的任务"
